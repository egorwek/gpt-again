// üëâ –í—ã–≤–µ–¥–∏ –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ 50.

// üìå –ü–æ–¥—Å–∫–∞–∑–∫–∞:

// –ò—Å–ø–æ–ª—å–∑—É–π –≤–Ω–µ—à–Ω–∏–π for-—Ü–∏–∫–ª –ø–æ —á–∏—Å–ª–∞–º –æ—Ç 2 –¥–æ 50.

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–ª–∏—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –Ω–∞ —á—Ç–æ-–ª–∏–±–æ –∫—Ä–æ–º–µ 1 –∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è.

// –ï—Å–ª–∏ –¥–µ–ª–∏—Ç—Å—è ‚Äî break.

for (let i = 2; i <= 50; i++) {
  let isPrime = true;

  for (let j = 2; j < i; j++) {
    if (i % j === 0) {
      isPrime = false;
      break;
    }
  }

  if (isPrime) {
    console.log(i);
  }
}

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// const arr = [1, 2, [3, 4], 5, [6, 7, [8]]];
// üëâ –ù–∞–ø–∏—à–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª—é–±–æ–π –≥–ª—É–±–∏–Ω—ã.

// üìå –ü–æ–¥—Å–∫–∞–∑–∫–∞:

// –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ for...of –∏–ª–∏ for.

const arr = [1, 2, [3, 4], 5, [6, 7, [8]]];
function sumNestedArray(array) {
  let sum = 0;

  for (const item of array) {
    if (Array.isArray(item)) {
      sum += sumNestedArray(item);
    } else {
      sum += item;
    }
  }

  return sum;
}
console.log(sumNestedArray(arr));

// üëâ –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–∞–±–ª–∏—Ü—É —É–º–Ω–æ–∂–µ–Ω–∏—è –æ—Ç 1 –¥–æ 10 –≤ –≤–∏–¥–µ:

// 1 √ó 1 = 1
// 1 √ó 2 = 2
// ...
// 10 √ó 10 = 100

const rows = 10;
const cols = 10;
for (let i = 1; i <= rows; i++) {
  for (let j = 1; j <= cols; j++) {
    console.log(`${i} √ó ${j} = ${i * j}`);
  }
}
